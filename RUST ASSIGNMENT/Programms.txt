1.
fn is_palindrome(s: &str) -> bool {
    let mut chars = s.chars().filter(|c| c.is_alphanumeric());
    while let (Some(front), Some(back)) = (chars.next(), chars.next_back()) {
        if front.to_lowercase() != back.to_lowercase() {
            return false;
        }
    }
    true
}

fn main() {
    let test_cases = vec![
        "A man, a plan, a canal, Panama!",
        "Was it a car or a cat I saw?",
        "No lemon, no melon",
        "not a palindrome",
    ];

    for test_case in test_cases {
        println!("Is '{}' a palindrome? {}", test_case, is_palindrome(test_case));
    }
}

2.
fn find_first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    let mut low = 0;
    let mut high = arr.len() - 1;
    let mut result = None;

    while low <= high {
        let mid = low + (high - low) / 2;
        if arr[mid] == target {
            result = Some(mid);
            high = mid - 1; // Move to the left to find the first occurrence
        } else if arr[mid] < target {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    result
}

fn main() {
    let arr = vec![1, 2, 3, 4, 4, 4, 5, 6, 7];
    let target = 4;
    match find_first_occurrence(&arr, target) {
        Some(index) => println!("The first occurrence of {} is at index {}", target, index),
        None => println!("{} is not present in the array", target),
    }
}

3.
fn shortest_word(s: &str) -> Option<&str> {
    s.split_whitespace().min_by_key(|word| word.len())
}

fn main() {
    let input = "The quick brown fox jumps over the lazy dog";
    match shortest_word(input) {
        Some(shortest) => println!("The shortest word is: {}", shortest),
        None => println!("The input string is empty"),
    }
}

4.
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    if n <= 3 {
        return true;
    }
    if n % 2 == 0 || n % 3 == 0 {
        return false;
    }

    let mut i = 5;
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false;
        }
        i += 6;
    }

    true
}

fn main() {
    let test_cases = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41];
    for &test_case in &test_cases {
        println!("Is {} prime? {}", test_case, is_prime(test_case));
    }
}

5.
fn find_median(arr: &[i32]) -> f64 {
    let len = arr.len();
    if len % 2 == 0 {
        let mid_right = len / 2;
        let mid_left = mid_right - 1;
        return (arr[mid_left] as f64 + arr[mid_right] as f64) / 2.0;
    } else {
        let mid = len / 2;
        return arr[mid] as f64;
    }
}

fn main() {
    let arr_even = vec![1, 2, 3, 4];
    let arr_odd = vec![1, 2, 3, 4, 5];

    println!("Median of even-length array: {}", find_median(&arr_even));
    println!("Median of odd-length array: {}", find_median(&arr_odd));
}

6.
fn longest_common_prefix(strings: &[String]) -> String {
    if strings.is_empty() {
        return String::new();
    }
    
    let mut prefix = strings[0].clone();
    
    for s in strings.iter().skip(1) {
        while !s.starts_with(&prefix) {
            prefix.pop();
            if prefix.is_empty() {
                return String::new(); // No common prefix found
            }
        }
    }
    
    prefix
}

fn main() {
    let strings1 = vec!["flower".to_string(), "flow".to_string(), "flight".to_string()];
    let strings2 = vec!["dog".to_string(), "racecar".to_string(), "car".to_string()];

    println!("Longest common prefix of {:?}: {}", strings1, longest_common_prefix(&strings1));
    println!("Longest common prefix of {:?}: {}", strings2, longest_common_prefix(&strings2));
}

7.
fn partition(arr: &mut [i32], low: usize, high: usize) -> usize {
    let pivot = arr[high];
    let mut i = low;
    for j in low..high {
        if arr[j] <= pivot {
            arr.swap(i, j);
            i += 1;
        }
    }
    arr.swap(i, high);
    i
}

fn quicksort(arr: &mut [i32], low: usize, high: usize) {
    if low < high {
        let pi = partition(arr, low, high);
        if pi > 0 {
            quicksort(arr, low, pi - 1);
        }
        quicksort(arr, pi + 1, high);
    }
}

fn kth_smallest(arr: &mut [i32], k: usize) -> Option<i32> {
    if k >= arr.len() {
        return None;
    }
    quicksort(arr, 0, arr.len() - 1);
    Some(arr[k])
}

fn main() {
    let mut arr = [7, 10, 4, 3, 20, 15];
    let k = 3;
    match kth_smallest(&mut arr, k) {
        Some(kth_smallest) => println!("The {}th smallest element is: {}", k, kth_smallest),
        None => println!("Array is too short for the given k"),
    }
}

8.
use std::cmp;

// Definition for a binary tree node.
#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Box<TreeNode>>,
    pub right: Option<Box<TreeNode>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

fn max_depth(root: Option<Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => {
            let left_depth = max_depth(node.left);
            let right_depth = max_depth(node.right);
            1 + cmp::max(left_depth, right_depth)
        }
        None => 0,
    }
}

fn main() {
    // Example binary tree:
    //     3
    //    / \
    //   9  20
    //     /  \
    //    15   7
    let root = Some(Box::new(TreeNode {
        val: 3,
        left: Some(Box::new(TreeNode::new(9))),
        right: Some(Box::new(TreeNode {
            val: 20,
            left: Some(Box::new(TreeNode::new(15))),
            right: Some(Box::new(TreeNode::new(7))),
        })),
    }));
    println!("Max depth of the tree: {}", max_depth(root));
}

9.
fn reverse_string(s: &str) -> String {
    s.chars().rev().collect()
}

fn main() {
    let original_string = "Hello, world!";
    let reversed_string = reverse_string(original_string);
    println!("Original: {}", original_string);
    println!("Reversed: {}", reversed_string);
}

10.
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    if n <= 3 {
        return true;
    }
    if n % 2 == 0 || n % 3 == 0 {
        return false;
    }

    let mut i = 5;
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false;
        }
        i += 6;
    }

    true
}

fn main() {
    let test_cases = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41];
    for &test_case in &test_cases {
        println!("Is {} prime? {}", test_case, is_prime(test_case));
    }
}

11.
fn merge_sorted_arrays(arr1: &[i32], arr2: &[i32]) -> Vec<i32> {
    let mut result = Vec::new();
    let (mut i, mut j) = (0, 0);

    while i < arr1.len() && j < arr2.len() {
        if arr1[i] < arr2[j] {
            result.push(arr1[i]);
            i += 1;
        } else {
            result.push(arr2[j]);
            j += 1;
        }
    }

    result.extend_from_slice(&arr1[i..]);
    result.extend_from_slice(&arr2[j..]);

    result
}

fn main() {
    let arr1 = vec![1, 3, 5, 7, 9];
    let arr2 = vec![2, 4, 6, 8, 10];
    let merged = merge_sorted_arrays(&arr1, &arr2);
    println!("Merged sorted arrays: {:?}", merged);
}

12.
fn max_subarray_sum(nums: &[i32]) -> i32 {
    let mut max_sum = std::i32::MIN;
    let mut current_sum = 0;

    for &num in nums {
        current_sum = current_sum.max(0) + num;
        max_sum = max_sum.max(current_sum);
    }

    max_sum
}

fn main() {
    let nums = vec![-2, 1, -3, 4, -1, 2, 1, -5, 4];
    let max_sum = max_subarray_sum(&nums);
    println!("Maximum subarray sum: {}", max_sum);
}

